// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  monitors      Monitor[]
  Team          Team[]    @relation("TeamMembers")
  TeamOwnerOf   Team[]    @relation("TeamOwner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Monitor {
  id                         String       @id @default(cuid())
  createdAt                  DateTime     @default(now())
  updatedAt                  DateTime     @updatedAt
  name                       String?
  alertType                  AlertType    @default(URL_DOWN)
  url                        String
  method                     HTTPMethod?
  headers                    HTTPHeader[]
  requestBody                String?
  followRedirects            Boolean      @default(false)
  keepCookiesWhenRedirecting Boolean      @default(false)
  timeout                    Int

  // Assertions
  statusCode      Int?
  maxResponseTime Int?
  bodyPattern     String?

  // Logs
  MonitorLog MonitorLog[]

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  maintenanceWindows MaintenanceWindow[]
  OnCall             OnCall[]

  @@index([userId])
}

model MaintenanceWindow {
  id         String    @id @default(cuid())
  startTime  Int
  endTime    Int
  timezone   String
  daysOfWeek Weekday[]
  doesRepeat Boolean   @default(true)
  monitorId  String
  Monitor    Monitor   @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
}

model Team {
  id      String   @id @default(cuid())
  name    String
  members User[]   @relation("TeamMembers")
  owner   User?    @relation("TeamOwner", fields: [userId], references: [id])
  onCalls OnCall[]
  userId  String?
}

model OnCall {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String
  role      String
  active    Boolean  @default(true)
  monitorId String?
  Monitor   Monitor? @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    String?

  @@index([teamId])
  @@index([monitorId])
}

model MonitorLog {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  monitorId    String
  statusCode   Int
  responseTime Int
  responseBody String?

  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
}

model HTTPHeader {
  id    String @id @default(cuid())
  key   String
  value String

  monitorId String
  Monitor   Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}

enum AlertType {
  URL_DOWN
  WRONG_STATUS_CODE
  RESPONSE_TIME
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
